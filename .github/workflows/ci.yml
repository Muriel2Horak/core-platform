name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  compose-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create CI environment file
        working-directory: docker
        run: |
          # üîß Create .env for CI with safe default values
          cat > .env << 'EOF'
          # ü§ñ CI Environment Configuration
          # These are safe default values for GitHub Actions CI
          
          # OIDC Configuration (CI defaults)
          OIDC_ISSUER=http://keycloak:8080/realms/core-platform
          OIDC_API_AUDIENCE=api
          CORS_ORIGINS=http://localhost:3000
          
          # Keycloak Admin Service (CI - will be configured later)
          KEYCLOAK_ADMIN_BASE_URL=http://keycloak:8080
          KEYCLOAK_ADMIN_REALM=master
          KEYCLOAK_ADMIN_CLIENT_ID=admin-cli
          KEYCLOAK_ADMIN_CLIENT_SECRET=ci-placeholder-secret
          KEYCLOAK_CLIENT_SECRET=ci-client-secret-placeholder
          KEYCLOAK_TARGET_REALM=core-platform
          
          # Application Secrets (CI - safe random values)
          APP_SECRET_KEY=ci-test-key-not-for-production-12345678901234567890
          JWT_SIGNING_KEY=ci-jwt-signing-key-for-testing-purposes-only-123456
          
          # Environment
          ENVIRONMENT=ci
          LOG_LEVEL=INFO
          AUDIT_LOG_LEVEL=INFO
          EOF
          echo "‚úÖ Created .env file for CI"

      - name: Setup CI-specific Loki config
        working-directory: docker
        run: |
          # üîß Use minimal Loki config for CI
          cp loki/config-ci.yml loki/config.yml
          echo "‚úÖ Using CI-optimized Loki configuration"

      - name: Install Loki Docker plugin
        run: |
          # üìä Install Loki plugin for Docker logging
          docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions
          echo "‚úÖ Loki Docker plugin installed"

      - name: Start core infrastructure first
        working-directory: docker
        run: |
          # üöÄ Start database and monitoring stack first
          echo "Starting database..."
          docker compose up -d db
          
          echo "Starting Loki..."
          docker compose up -d loki
          
          echo "Starting Promtail..."
          docker compose up -d promtail
          
          echo "‚úÖ Core infrastructure started"

      - name: Wait for Loki readiness
        run: |
          echo "‚è≥ Waiting for Loki to be ready..."
          for i in {1..60}; do
            if curl -sf http://localhost:3100/ready | grep -qi ready; then
              echo "‚úÖ Loki is ready"; 
              break;
            fi
            if [ $i -eq 60]; then
              echo "‚ùå Loki not ready in time"
              echo "üîç Checking Loki logs:"
              docker logs core-loki || true
              echo "üîç Loki config validation:"
              docker exec core-loki loki -config.file=/etc/loki/config.yml -verify-config || true
              exit 1
            fi
            echo "‚è≥ Waiting for Loki... ($i/60)"
            sleep 2
          done
          echo "‚úÖ Loki ready - CI can continue"

      - name: Start application services
        working-directory: docker
        run: |
          # üöÄ Start application services
          echo "Starting backend..."
          docker compose up -d --build backend
          
          echo "Starting frontend..."
          docker compose up -d --build frontend
          
          echo "Starting Grafana..."
          docker compose up -d grafana
          
          echo "‚úÖ Application services started"

      - name: Wait for Backend readiness
        run: |
          echo "‚è≥ Waiting for Backend to be ready..."
          for i in {1..30}; do
            if curl -sf http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "‚úÖ Backend is ready";
              break;
            fi
            echo "‚è≥ Waiting for Backend... ($i/30)"
            sleep 3
          done

      - name: Test services health
        run: |
          echo "üè• Testing service health..."
          
          # Test Loki
          echo "üìä Testing Loki..."
          curl -sf http://localhost:3100/ready || (echo "‚ùå Loki failed"; exit 1)
          
          # Test Backend
          echo "‚öôÔ∏è Testing Backend..."
          curl -sf http://localhost:8080/actuator/health || (echo "‚ùå Backend failed"; exit 1)
          
          # Test Frontend (basic connectivity)
          echo "üé® Testing Frontend..."
          curl -sf http://localhost:3000 >/dev/null || (echo "‚ùå Frontend failed"; exit 1)
          
          echo "‚úÖ All core services are healthy"

      - name: Test Loki functionality
        run: |
          echo "üîç Testing Loki query functionality..."
          
          # Wait a bit for logs to accumulate
          sleep 10
          
          # Test basic query
          QUERY_RESULT=$(curl -s 'http://localhost:3100/loki/api/v1/query?query=%7Bjob%3D%22docker%22%7D&limit=5')
          echo "$QUERY_RESULT" | tee /tmp/loki_query.json
          
          # Check if we got valid JSON response
          if echo "$QUERY_RESULT" | jq empty 2>/dev/null; then
            echo "‚úÖ Loki query returned valid JSON"
          else
            echo "‚ö†Ô∏è Loki query returned non-JSON response (may be normal in CI)"
          fi

      - name: Show Promtail targets (debug)
        run: |
          echo "üéØ Checking Promtail targets..."
          curl -s http://localhost:9080/targets || echo "‚ö†Ô∏è Promtail targets not available"

      - name: Show service status
        if: always()
        run: |
          echo "üìä Final service status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

      - name: Show logs on failure
        if: failure()
        working-directory: docker
        run: |
          echo "üîç Showing logs for debugging..."
          echo "=== Loki logs ==="
          docker logs core-loki || true
          echo "=== Backend logs ==="
          docker logs core-backend || true
          echo "=== Promtail logs ==="
          docker logs core-promtail || true

      - name: Teardown
        if: always()
        working-directory: docker
        run: |
          echo "üßπ Cleaning up..."
          docker compose down -v
          echo "‚úÖ Teardown complete"

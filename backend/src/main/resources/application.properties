# ====== SERVER ======
spring.application.name=backend
server.port=8080

# ‚úÖ MULTIPART UPLOAD Configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.enabled=true

# ====== DATASOURCE (Postgres) ======
spring.datasource.url=jdbc:postgresql://db:5432/core
spring.datasource.username=core
spring.datasource.password=core
spring.jpa.hibernate.ddl-auto=update

# ====== SPRING SECURITY OAUTH2 RESOURCE SERVER ======
# üîë JWT issuer - MUS√ç odpov√≠dat hodnotƒõ "iss" v tokenech od Keycloaku!
# Pro Docker intern√≠ komunikaci pou≈æ√≠v√°me HTTP endpoint pro oba
spring.security.oauth2.resourceserver.jwt.issuer-uri=${OIDC_ISSUER_URI:https://${DOMAIN:core-platform.local}/realms/core-platform}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${OIDC_JWK_SET_URI:http://keycloak:8080/realms/core-platform/protocol/openid-connect/certs}

# Audience for JWT validation
security.oauth2.audience=${OIDC_API_AUDIENCE:api}

# üîë OAuth2 klient pro backend - extern√≠ URL (pro redirecty)
spring.security.oauth2.client.registration.keycloak.client-id=core-backend
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET:CHANGE_ME}
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri=https://${DOMAIN:core-platform.local}/api/auth/callback

# üîë Keycloak provider - extern√≠ URLs (pro OAuth2 flow)
spring.security.oauth2.client.provider.keycloak.authorization-uri=https://${DOMAIN:core-platform.local}/realms/core-platform/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=https://${DOMAIN:core-platform.local}/realms/core-platform/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=https://${DOMAIN:core-platform.local}/realms/core-platform/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=https://${DOMAIN:core-platform.local}/realms/core-platform/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# ====== CORS Configuration ======
cors.origins=${CORS_ORIGINS:https://${DOMAIN:core-platform.local},http://localhost}

# üîê Keycloak Admin Service - INTERN√ç Docker s√≠≈• (pouze pro admin REST API)
keycloak.admin.base-url=${KEYCLOAK_ADMIN_BASE_URL:http://keycloak:8080}
keycloak.admin.realm=${KEYCLOAK_ADMIN_REALM:core-platform}
keycloak.admin.client-id=${KEYCLOAK_ADMIN_CLIENT_ID:backend-admin-service}
keycloak.admin.client-secret=${KEYCLOAK_ADMIN_CLIENT_SECRET:lYHZXQHv1lHEn1bToLzySIchd7dVIFmm}
keycloak.target-realm=${KEYCLOAK_TARGET_REALM:core-platform}

# üîê Samostatn√© nastaven√≠ pro backend Keycloak komunikaci
keycloak.base-url=http://keycloak:8080
keycloak.realm=core-platform
keycloak.client-id=web
keycloak.token-scopes=openid profile email

# ‚úÖ Pro DEV √∫ƒçely - pokud HTTPS curl sel≈æe z backend kontejneru
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/core-platform/protocol/openid-connect/certs

# ====== LOGGING ======
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security.oauth2.server.resource=DEBUG
logging.level.org.springframework.security.web.access.intercept=DEBUG
logging.level.cz.muriel.core=DEBUG
# ‚úÖ P≈òID√ÅNO: Debug pro UserProfileController JWT claims
logging.level.cz.muriel.core.controller.UserProfileController=DEBUG

# Spring Boot Actuator - Monitoring and Metrics
management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.endpoint.health.show-details=always
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# Custom application metrics
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.slo.http.server.requests=50ms,100ms,200ms,300ms,500ms,1s

# ====== S3 Storage (MinIO) ======
# Endpoint pro S3 kompatibiln√≠ √∫lo≈æi≈°tƒõ (MinIO)
spring.cloud.aws.s3.endpoint=${S3_ENDPOINT:http://minio:9000}
# Region je pro MinIO vy≈æadov√°n, ale jeho hodnota nen√≠ kritick√°
spring.cloud.aws.s3.region=${S3_REGION:us-east-1}
# P≈ôihla≈°ovac√≠ √∫daje k MinIO
spring.cloud.aws.credentials.access-key=${S3_ACCESS_KEY:minioadmin}
spring.cloud.aws.credentials.secret-key=${S3_SECRET_KEY:minioadmin}
# Povol√≠ path-style access, co≈æ je nutn√© pro MinIO
spring.cloud.aws.s3.path-style-access-enabled=true

# N√°zev bucketu pro aplikaci
storage.s3.bucket-name=${S3_BUCKET_NAME:core-platform-data}
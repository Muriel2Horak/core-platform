# ====== SERVER ======
spring.application.name=backend
server.port=8080

# ====== DATASOURCE (Postgres) ======
spring.datasource.url=jdbc:postgresql://db:5432/core
spring.datasource.username=core
spring.datasource.password=core
spring.jpa.hibernate.ddl-auto=update

# ====== FLYWAY MIGRATION ======
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true

# ====== MULTITENANCY CONFIGURATION ======
tenancy.default-tenant-key=${TENANCY_DEFAULT_TENANT_KEY:test-tenant}
auth.jwt.tenant-claim=${AUTH_JWT_TENANT_CLAIM:tenant}

# ====== DYNAMIC JWT DECODER CONFIGURATION ======
# üîê DYNAMIC ISSUERS: Podporuje tenant-specific realms
# - core-platform: https://core-platform.local/realms/core-platform  
# - ivigee: https://ivigee.core-platform.local/realms/ivigee
# - acme: https://acme.core-platform.local/realms/acme

# Base domain for constructing tenant-specific issuer URIs
security.oauth2.base-domain=${DOMAIN:core-platform.local}

# Audience for JWT validation (same for all tenants)
security.oauth2.audience=${OIDC_API_AUDIENCE:api}

# ‚ùå REMOVED: Static issuer configuration no longer needed
# spring.security.oauth2.resourceserver.jwt.issuer-uri=...
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=...

# ====== OAUTH2 CLIENT CONFIGURATION ======
# üîë OAuth2 klient pro backend - extern√≠ URL (pro redirecty)
# POZN√ÅMKA: Toto je pro OAuth2 flow, ne pro JWT validaci
spring.security.oauth2.client.registration.keycloak.client-id=core-backend
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri=https://${DOMAIN:core-platform.local}/api/auth/callback

# üîë Keycloak provider - extern√≠ URLs (pro OAuth2 flow)
# POZN√ÅMKA: Toto je pouze pro core-platform realm
spring.security.oauth2.client.provider.keycloak.authorization-uri=https://${DOMAIN:core-platform.local}/realms/core-platform/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=https://${DOMAIN:core-platform.local}/realms/core-platform/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=https://${DOMAIN:core-platform.local}/realms/core-platform/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=https://${DOMAIN:core-platform.local}/realms/core-platform/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# ====== CORS Configuration ======
cors.origins=${CORS_ORIGINS:https://${DOMAIN:core-platform.local},http://localhost}

# üîê Keycloak Admin Service - INTERN√ç Docker s√≠≈• (pouze pro admin REST API)
keycloak.admin.base-url=${KEYCLOAK_ADMIN_BASE_URL:http://keycloak:8080}
keycloak.admin.realm=${KEYCLOAK_ADMIN_REALM:master}
keycloak.admin.client-id=${KEYCLOAK_ADMIN_CLIENT_ID:backend-admin-service}
keycloak.admin.client-secret=${KEYCLOAK_ADMIN_CLIENT_SECRET}
keycloak.target-realm=${KEYCLOAK_TARGET_REALM:core-platform}

# üîê Samostatn√© nastaven√≠ pro backend Keycloak komunikaci
keycloak.base-url=http://keycloak:8080
keycloak.realm=core-platform
keycloak.client-id=web
keycloak.token-scopes=openid profile email

# ====== TENANT MANAGEMENT CONFIGURATION ======
app.tenant.auto-add-hosts=${TENANT_AUTO_ADD_HOSTS:true}
app.tenant.auto-create-realm=${TENANT_AUTO_CREATE_REALM:true}

# ====== LOGGING ======
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security.oauth2.server.resource=DEBUG
logging.level.org.springframework.security.web.access.intercept=DEBUG
logging.level.cz.muriel.core=DEBUG
# ‚úÖ P≈òID√ÅNO: Debug pro UserProfileController JWT claims
logging.level.cz.muriel.core.controller.UserProfileController=DEBUG
# üè¢ P≈òID√ÅNO: Debug pro tenant komponenty
logging.level.cz.muriel.core.tenant=DEBUG
# üîê P≈òID√ÅNO: Debug pro dynamic JWT decoder
logging.level.cz.muriel.core.auth.config.DynamicJwtDecoder=DEBUG

# ====== KEYCLOAK WEBHOOK SECURITY ======
keycloak.webhook.hmac-secret=${KC_EVENT_WEBHOOK_SECRET}

# Spring Boot Actuator - Monitoring and Metrics
management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.endpoint.health.show-details=always
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# Custom application metrics
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.slo.http.server.requests=50ms,100ms,200ms,300ms,500ms,1s
package cz.muriel.core.auth.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator;
import org.springframework.security.oauth2.core.OAuth2TokenValidator;
import org.springframework.security.oauth2.jwt.*;
import org.springframework.stereotype.Component;

import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;

/**
 * üîê DYNAMIC JWT DECODER - Podporuje r≈Øzn√© issuers pro jednotliv√© tenanty
 * 
 * Ka≈æd√Ω tenant m√° vlastn√≠ realm a t√≠m p√°dem vlastn√≠ issuer: - core-platform:
 * https://core-platform.local/realms/core-platform - ivigee:
 * https://ivigee.core-platform.local/realms/ivigee - acme:
 * https://acme.core-platform.local/realms/acme
 */
@Component @Slf4j
public class DynamicJwtDecoder implements JwtDecoder {

  @Value("${DOMAIN:core-platform.local}")
  private String baseDomain;

  @Value("${security.oauth2.audience:api}")
  private String allowedAudience;

  // Cache decoder≈Ø pro jednotliv√© tenanty
  private final Map<String, JwtDecoder> decoderCache = new ConcurrentHashMap<>();

  @Override
  public Jwt decode(String token) throws JwtException {
    // 1. Nejprve dek√≥dujeme token bez validace issuer pro z√≠sk√°n√≠ tenant info
    String[] chunks = token.split("\\.");
    if (chunks.length != 3) {
      throw new JwtException("Invalid JWT format");
    }

    try {
      // Dek√≥dujeme payload bez validace
      String payload = new String(java.util.Base64.getUrlDecoder().decode(chunks[1]));
      com.fasterxml.jackson.databind.ObjectMapper mapper = new com.fasterxml.jackson.databind.ObjectMapper();
      com.fasterxml.jackson.databind.JsonNode jsonNode = mapper.readTree(payload);

      // Extrahujeme tenant z tokenu
      String tenantKey = extractTenantFromPayload(jsonNode);
      if (tenantKey == null) {
        tenantKey = "core-platform"; // fallback
      }

      // 2. Z√≠sk√°me nebo vytvo≈ô√≠me decoder pro dan√Ω tenant
      JwtDecoder decoder = getOrCreateDecoderForTenant(tenantKey);

      // 3. Validujeme token pomoc√≠ spr√°vn√©ho decoderu
      return decoder.decode(token);

    } catch (Exception e) {
      log.error("Failed to decode JWT token", e);
      throw new JwtException("Failed to decode JWT", e);
    }
  }

  /**
   * Extrahuje tenant key z JWT payload
   */
  private String extractTenantFromPayload(com.fasterxml.jackson.databind.JsonNode payload) {
    // 1. Zkus√≠me tenant claim
    if (payload.has("tenant")) {
      return payload.get("tenant").asText();
    }

    // 2. Zkus√≠me extrahovat z issuer
    if (payload.has("iss")) {
      String issuer = payload.get("iss").asText();
      // Oƒçek√°v√°me: https://tenant.core-platform.local/realms/tenant
      if (issuer.contains("/realms/")) {
        String realmPart = issuer.substring(issuer.lastIndexOf("/realms/") + 8);
        if (!realmPart.equals("core-platform")) {
          return realmPart;
        }

        // Zkus√≠me extrahovat z hostname ƒç√°sti
        if (issuer.startsWith("https://") && issuer.contains(".core-platform.local")) {
          String hostname = issuer.substring(8); // remove https://
          if (hostname.contains("/")) {
            hostname = hostname.substring(0, hostname.indexOf("/"));
          }
          String[] parts = hostname.split("\\.");
          if (parts.length >= 3 && !parts[0].equals("core-platform")) {
            return parts[0]; // tenant subdomain
          }
        }
      }
    }

    return null;
  }

  /**
   * Z√≠sk√° nebo vytvo≈ô√≠ JWT decoder pro dan√Ω tenant
   */
  private JwtDecoder getOrCreateDecoderForTenant(String tenantKey) {
    return decoderCache.computeIfAbsent(tenantKey, this::createDecoderForTenant);
  }

  /**
   * Vytvo≈ô√≠ JWT decoder pro specifick√Ω tenant
   */
  private JwtDecoder createDecoderForTenant(String tenantKey) {
    log.info("üîê Creating JWT decoder for tenant: {}", tenantKey);

    // Sestav√≠me issuer URI pro dan√Ω tenant
    String issuerUri;
    if ("core-platform".equals(tenantKey)) {
      issuerUri = String.format("https://%s/realms/core-platform", baseDomain);
    } else {
      issuerUri = String.format("https://%s.%s/realms/%s", tenantKey, baseDomain, tenantKey);
    }

    // Sestav√≠me JWK Set URI (intern√≠ Docker komunikace)
    String jwkSetUri = String.format("http://keycloak:8080/realms/%s/protocol/openid-connect/certs",
        tenantKey);

    log.debug("üìç Tenant: {} -> Issuer: {}, JWK Set: {}", tenantKey, issuerUri, jwkSetUri);

    try {
      // Vytvo≈ô√≠me decoder
      NimbusJwtDecoder decoder = NimbusJwtDecoder.withJwkSetUri(jwkSetUri).build();

      // P≈ôid√°me valid√°tory
      OAuth2TokenValidator<Jwt> validator = new DelegatingOAuth2TokenValidator<>(
          new JwtTimestampValidator(), new JwtIssuerValidator(issuerUri),
          new JwtAudienceValidator(allowedAudience));

      decoder.setJwtValidator(validator);

      log.info("‚úÖ JWT decoder created successfully for tenant: {}", tenantKey);
      return decoder;

    } catch (Exception e) {
      log.error("‚ùå Failed to create JWT decoder for tenant: {}", tenantKey, e);
      throw new JwtException("Failed to create JWT decoder for tenant: " + tenantKey, e);
    }
  }

  /**
   * Vyma≈æe cache - pro testing nebo refresh
   */
  public void clearCache() {
    decoderCache.clear();
    log.info("üßπ JWT decoder cache cleared");
  }

  /**
   * Vr√°t√≠ poƒçet cached decoder≈Ø
   */
  public int getCacheSize() {
    return decoderCache.size();
  }
}

services:
  # 🌐 Nginx reverse proxy - SSL/HTTPS configuration
  nginx:
    image: nginx:alpine
    container_name: core-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    environment:
      - DOMAIN=${DOMAIN:-core-platform.local}
    volumes:
      - ./nginx/nginx-ssl.conf.template:/etc/nginx/templates/nginx-ssl.conf.template:ro
      - ./nginx/start-nginx.sh:/usr/local/bin/start-nginx.sh:ro
      # 🔒 Updated to use new wildcard SSL certificates
      - ../ssl:/etc/nginx/ssl:ro
      - certbot-www:/var/www/certbot:ro
    command: [ "/usr/local/bin/start-nginx.sh" ]
    depends_on:
      - frontend
      - backend
      - keycloak
    networks:
      - core-net
    restart: unless-stopped

  # 🗄️ Database
  db:
    image: postgres:16
    container_name: core-db
    environment:
      POSTGRES_USER: core
      POSTGRES_PASSWORD: core
      POSTGRES_DB: core
    volumes:
      - core_db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - core-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # 🗄️ PgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: core-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@local.dev
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - core-net

  # 🏗️ Backend
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: core-backend
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_started
      loki:
        condition: service_started
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      # 🌐 DOMAIN pro všechny external URLs
      - DOMAIN=${DOMAIN:-core-platform.local}
      # 🔧 FIX: OIDC Configuration - opravené issuery pro JWT validaci
      - OIDC_ISSUER_URI=https://${DOMAIN:-core-platform.local}/realms/core-platform
      - OIDC_JWK_SET_URI=https://keycloak:8443/realms/core-platform/protocol/openid-connect/certs
      - OIDC_API_AUDIENCE=api
      # 🔧 FIX: CORS origins - použijeme environment proměnnou
      - CORS_ORIGINS=https://${DOMAIN:-core-platform.local}
      - DATABASE_URL=${DATABASE_URL:-jdbc:postgresql://db:5432/core}
      - LOKI_URL=http://loki:3100/loki/api/v1/push
      - LOG_LEVEL=DEBUG
      - SPRING_PROFILES_ACTIVE=development
      # 🔐 Service Account Credentials
      - KEYCLOAK_ADMIN_CLIENT_ID=backend-admin-service
      - KEYCLOAK_ADMIN_CLIENT_SECRET=${KEYCLOAK_ADMIN_CLIENT_SECRET}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET:-}
      - KEYCLOAK_ADMIN_REALM=core-platform
      - KEYCLOAK_TARGET_REALM=core-platform
      - KEYCLOAK_ADMIN_BASE_URL=https://keycloak:8443
      # 🏢 MULTITENANCY Configuration
      - TENANCY_DEFAULT_TENANT_KEY=${TENANCY_DEFAULT_TENANT_KEY:-test-tenant}
      - AUTH_JWT_TENANT_CLAIM=${AUTH_JWT_TENANT_CLAIM:-tenant}
      # 🔗 KEYCLOAK WEBHOOK Configuration - OPRAVENO: používá stejný secret jako Keycloak SPI
      - APP_KEYCLOAK_WEBHOOK_SECRET=${KC_WEBHOOK_SECRET:-webhook-secret-change-me-in-production}
      - KC_EVENT_WEBHOOK_SECRET=${KC_WEBHOOK_SECRET:-webhook-secret-change-me-in-production}
      - keycloak.webhook.hmac-secret=${KC_WEBHOOK_SECRET:-webhook-secret-change-me-in-production}
      # 📅 KEYCLOAK BACKFILL Configuration
      - APP_KEYCLOAK_BACKFILL_ENABLED=${APP_KEYCLOAK_BACKFILL_ENABLED:-true}
      - APP_KEYCLOAK_BACKFILL_CRON=${APP_KEYCLOAK_BACKFILL_CRON:-0 25 3 * * *}
      - KEYCLOAK_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USERNAME:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      # 🔒 SSL Configuration for HTTPS communication with Keycloak
      - JAVA_OPTS=-Djavax.net.ssl.trustStore=/etc/ssl/certs/java/cacerts -Djavax.net.ssl.trustStorePassword=changeit -Djavax.net.ssl.trustStoreType=JKS
    volumes:
      # 🔒 Updated to use new wildcard SSL certificates
      - ../ssl:/etc/ssl/backend:ro
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"
        loki-external-labels: "service=backend,environment=${ENVIRONMENT:-development}"
    networks:
      - core-net
    restart: unless-stopped

  # 🛡️ Frontend  
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
      target: development
    container_name: core-frontend
    environment:
      - HOST=0.0.0.0
      # 🌐 Používá DOMAIN místo hardcoded URLs
      - VITE_API_TARGET=https://${DOMAIN:-core-platform.local}/api
      - VITE_LOKI_TARGET=http://loki:3100
      - VITE_KEYCLOAK_URL=https://${DOMAIN:-core-platform.local}
      - VITE_KEYCLOAK_REALM=core-platform
      - VITE_KEYCLOAK_CLIENT_ID=web
    volumes:
      - ../frontend:/app
      - ../frontend/node_modules:/app/node_modules
    command: [ "sh", "-c", "npm install && npm run dev -- --port 3000 --host 0.0.0.0" ]
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/ || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      backend:
        condition: service_started
      loki:
        condition: service_started
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"
        loki-external-labels: "service=frontend,environment=${ENVIRONMENT:-development}"
    networks:
      - core-net
    restart: unless-stopped

  # 🔐 Keycloak
  keycloak:
    build:
      context: ..
      dockerfile: docker/keycloak/Dockerfile
    image: core-platform/keycloak:local
    container_name: core-keycloak
    restart: unless-stopped
    ports:
      - "8081:8443" # 🔒 HTTPS port mapping
    environment:
      # 🔐 Admin credentials
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      
      # 👥 Test User Credentials (DEVELOPMENT ONLY)
      TEST_USER_PASSWORD: ${TEST_USER_PASSWORD:-Test.1234}
      TEST_ADMIN_PASSWORD: ${TEST_ADMIN_PASSWORD:-Test.1234}

      # 🔒 HTTPS Production Mode Configuration
      KC_PROXY: "edge"
      KC_HOSTNAME: ${DOMAIN:-core-platform.local}
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "false" # 🔒 Disable HTTP
      KC_HTTPS_PORT: "8443" # 🔒 HTTPS port
      KC_HTTPS_CLIENT_AUTH: "none"
      # 🔒 SSL Certificate configuration
      KC_HTTPS_CERTIFICATE_FILE: /etc/ssl/keycloak/cert.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /etc/ssl/keycloak/key.pem

      # 🔗 Event listeners configuration
      KC_EVENTS_LISTENERS: "jboss-logging,muriel-webhook"

      # 🪝 Webhook SPI configuration
      KC_SPI_EVENTS_LISTENER_MURIEL_WEBHOOK_ENDPOINT_URL: ${KC_WEBHOOK_ENDPOINT_URL:-http://backend:8080/internal/keycloak/events}
      KC_SPI_EVENTS_LISTENER_MURIEL_WEBHOOK_SECRET: ${KC_WEBHOOK_SECRET:-}
      KC_SPI_EVENTS_LISTENER_MURIEL_WEBHOOK_REALM_TENANT_MAP: ${KC_REALM_TENANT_MAP:-}
      KC_SPI_EVENTS_LISTENER_MURIEL_WEBHOOK_ENABLED_TYPES: ${KC_ENABLED_TYPES:-USER_CREATED,USER_UPDATED,USER_DELETED}

      # 📊 Logging and health
      KC_LOG_LEVEL: ${KC_LOG_LEVEL:-INFO,cz.muriel.keycloak.webhook:DEBUG}
      KC_HEALTH_ENABLED: "true"

    volumes:
      - keycloak_data:/opt/keycloak/data
      # 🔒 Updated to use new wildcard SSL certificates
      - ../ssl:/etc/ssl/keycloak:ro

    # 🔒 Production HTTPS mode - removes dev mode
    # Note: CMD is defined in Dockerfile now

    networks:
      - core-net

  # 🏗️ Volitelná bootstrap služba pro automatické nastavení tenant realmů
  # Aktivuje se pouze když jsou nastaveny env proměnné AUTO_BOOTSTRAP_*
  kc-bootstrap:
    image: core-platform/keycloak:local
    container_name: core-kc-bootstrap
    profiles:
      - bootstrap # Aktivuje se pouze s --profile bootstrap
    depends_on:
      keycloak:
        condition: service_started
    environment:
      # 📋 Bootstrap parametry
      - REALM=${AUTO_BOOTSTRAP_REALM:-}
      - WEBHOOK_URL=${AUTO_BOOTSTRAP_WEBHOOK_URL:-http://backend:8080/internal/keycloak/events}
      - WEBHOOK_SECRET=${KC_WEBHOOK_SECRET:-}
      - TENANT_ADMIN=${AUTO_BOOTSTRAP_TENANT_ADMIN:-tenant-admin}
      - TENANT_ADMIN_PASSWORD=${AUTO_BOOTSTRAP_TENANT_ADMIN_PASSWORD:-}
      - KEYCLOAK_ADMIN_USER=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      - KC_BASE_URL=https://keycloak:8443
    volumes:
      - ../scripts:/scripts:ro
    command: >
      sh -c "
        if [ -z \"$$REALM\" ]; then
          echo '⚠️  AUTO_BOOTSTRAP_REALM not set, skipping bootstrap';
          exit 0;
        fi;
        echo '🏗️ Auto-bootstrapping realm: '$$REALM;
        echo '⏳ Waiting for Keycloak to be ready...';
        for i in \$$(seq 1 120); do
          if wget -q --spider https://keycloak:8443/health/ready 2>/dev/null; then
            break;
          fi;
          sleep 2;
        done;
        echo '✅ Keycloak is ready, starting bootstrap...';
        /scripts/kc_bootstrap_realm.sh;
        echo '🎉 Bootstrap completed, container will exit';
      "
    networks:
      - core-net
    restart: "no" # Spustí se pouze jednou

  # 📊 Monitoring Stack
  grafana:
    image: grafana/grafana:10.4.0
    container_name: core-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - core-net

  loki:
    image: grafana/loki:3.0.0
    container_name: core-loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml
      - loki_data:/loki
    networks:
      - core-net

  promtail:
    image: grafana/promtail:3.0.0
    container_name: core-promtail
    command: -config.file=/etc/promtail/config.yml
    ports:
      - "9080:9080"
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - promtail_positions:/tmp
    depends_on:
      - loki
    networks:
      - core-net
    user: "0:0"

  prometheus:
    image: prom/prometheus:v2.54.0
    container_name: core-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - loki
      - promtail
    networks:
      - core-net

  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: core-node-exporter
    ports:
      - "9100:9100"
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    networks:
      - core-net
    profiles:
      - vm

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: core-cadvisor
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - core-net
    privileged: true

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: core-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://core:core@db:5432/core?sslmode=disable
    depends_on:
      - db
    networks:
      - core-net

volumes:
  core_db_data:
  grafana_data:
  loki_data:
  promtail_positions:
  certbot-www:
  keycloak_data:


networks:
  core-net:
    driver: bridge

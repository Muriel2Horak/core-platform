services:
  # üåê Nginx reverse proxy - SSL/HTTPS configuration
  nginx:
    image: nginx:alpine
    container_name: core-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    environment:
      - DOMAIN=${DOMAIN:-core-platform.local}
    volumes:
      - ./nginx/nginx-ssl.conf.template:/etc/nginx/templates/nginx-ssl.conf.template:ro
      - ./nginx/start-nginx.sh:/usr/local/bin/start-nginx.sh:ro
      - ./ssl:/etc/nginx/ssl:ro
      - certbot-www:/var/www/certbot:ro
    command: [ "/usr/local/bin/start-nginx.sh" ]
    depends_on:
      - frontend
      - backend
      - keycloak
    networks:
      - core-net
    restart: unless-stopped

  # üóÑÔ∏è Database
  db:
    image: postgres:16
    container_name: core-db
    environment:
      POSTGRES_USER: core
      POSTGRES_PASSWORD: core
      POSTGRES_DB: core
    volumes:
      - core_db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - core-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # üóÑÔ∏è PgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: core-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@local.dev
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - core-net

  # üèóÔ∏è Backend
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: core-backend
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      loki:
        condition: service_started
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      # üåê DOMAIN pro v≈°echny external URLs
      - DOMAIN=${DOMAIN:-core-platform.local}
      # üîß FIX: OIDC Configuration - opraven√© issuery pro JWT validaci
      - OIDC_ISSUER_URI=https://${DOMAIN:-core-platform.local}/realms/core-platform
      - OIDC_JWK_SET_URI=http://keycloak:8080/realms/core-platform/protocol/openid-connect/certs
      - OIDC_API_AUDIENCE=api
      # üîß FIX: CORS origins - pou≈æijeme environment promƒõnnou
      - CORS_ORIGINS=https://${DOMAIN:-core-platform.local}
      - DATABASE_URL=${DATABASE_URL:-jdbc:postgresql://db:5432/core}
      - LOKI_URL=http://loki:3100/loki/api/v1/push
      - LOG_LEVEL=DEBUG
      - SPRING_PROFILES_ACTIVE=development
      # üîê Service Account Credentials
      - KEYCLOAK_ADMIN_CLIENT_ID=backend-admin-service
      - KEYCLOAK_ADMIN_CLIENT_SECRET=lYHZXQHv1lHEn1bToLzySIchd7dVIFmm
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET:-}
      - KEYCLOAK_ADMIN_REALM=core-platform
      - KEYCLOAK_TARGET_REALM=core-platform
      - KEYCLOAK_ADMIN_BASE_URL=http://keycloak:8080
      # üè¢ MULTITENANCY Configuration
      - TENANCY_DEFAULT_TENANT_KEY=${TENANCY_DEFAULT_TENANT_KEY:-test-tenant}
      - AUTH_JWT_TENANT_CLAIM=${AUTH_JWT_TENANT_CLAIM:-tenant}
      # üîó KEYCLOAK WEBHOOK Configuration
      - APP_KEYCLOAK_WEBHOOK_SECRET=${KC_EVENT_WEBHOOK_SECRET:-webhook-secret-change-me-in-production}
      # üìÖ KEYCLOAK BACKFILL Configuration
      - APP_KEYCLOAK_BACKFILL_ENABLED=${APP_KEYCLOAK_BACKFILL_ENABLED:-true}
      - APP_KEYCLOAK_BACKFILL_CRON=${APP_KEYCLOAK_BACKFILL_CRON:-0 25 3 * * *}
      - KEYCLOAK_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USERNAME:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"
        loki-external-labels: "service=backend,environment=${ENVIRONMENT:-development}"
    networks:
      - core-net
    restart: unless-stopped

  # üõ°Ô∏è Frontend  
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
      target: development
    container_name: core-frontend
    environment:
      - HOST=0.0.0.0
      # üåê Pou≈æ√≠v√° DOMAIN m√≠sto hardcoded URLs
      - VITE_API_TARGET=https://${DOMAIN:-core-platform.local}/api
      - VITE_LOKI_TARGET=http://loki:3100
      - VITE_KEYCLOAK_URL=https://${DOMAIN:-core-platform.local}
      - VITE_KEYCLOAK_REALM=core-platform
      - VITE_KEYCLOAK_CLIENT_ID=web
    volumes:
      - ../frontend:/app
      - ../frontend/node_modules:/app/node_modules
    command: [ "sh", "-c", "npm install && npm run dev -- --port 3000 --host 0.0.0.0" ]
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/ || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      backend:
        condition: service_started
      loki:
        condition: service_started
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"
        loki-external-labels: "service=frontend,environment=${ENVIRONMENT:-development}"
    networks:
      - core-net
    restart: unless-stopped

  # üîê Keycloak
  keycloak:
    build:
      context: ../keycloak-spi-event-webhook
      dockerfile: ../docker/keycloak/Dockerfile
    container_name: core-keycloak
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && head -1 <&3 | grep -q '200'" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    environment:
      # üåê DOMAIN pro dynamick√© generov√°n√≠ realm exportu
      - DOMAIN=${DOMAIN:-core-platform.local}

      # üîß Keycloak 24.0.5 - optim√°ln√≠ konfigurace pro single-node
      - KC_HEALTH_ENABLED=true # Povol√≠ health endpointy na /health/*
      - KC_METRICS_ENABLED=true # Povol√≠ metriky pro monitoring
      - KC_PROXY_HEADERS=xforwarded # P≈ôij√≠m√° X-Forwarded-* hlaviƒçky od reverse proxy
      - KC_CACHE=local # Lok√°ln√≠ cache m√≠sto JGroups clusteru (≈ôe≈°√≠ JGroups loop)

      # üóÑÔ∏è PostgreSQL datab√°ze konfigurace
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://db:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak

      # üîê SSL/TLS certifik√°ty konfigurace
      - KC_HTTPS_CERTIFICATE_FILE=/opt/keycloak/conf/tls/cert.pem # Cesta k SSL certifik√°tu
      - KC_HTTPS_CERTIFICATE_KEY_FILE=/opt/keycloak/conf/tls/key.pem # Cesta k priv√°tn√≠mu kl√≠ƒçi

      # üë§ Admin √∫ƒçet
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin

      # üé® Theme konfigurace - pouze cache nastaven√≠, ≈æ√°dn√© glob√°ln√≠ t√©ma
      - KC_SPI_THEME_CACHE_THEMES=false
      - KC_SPI_THEME_CACHE_TEMPLATES=false
      - KC_SPI_THEME_STATIC_MAX_AGE=-1

      # üöÄ Features
      - KC_FEATURES=scripts,token-exchange,admin-fine-grained-authz

      # üîó Webhook Event Listener Configuration
      - KC_EVENT_WEBHOOK_URL=${KC_EVENT_WEBHOOK_URL:-http://backend:8080/internal/keycloak/events}
      - KC_EVENT_WEBHOOK_SECRET=${KC_EVENT_WEBHOOK_SECRET:-webhook-secret-change-me-in-production}
      - KC_SPI_EVENTS_LISTENER_CORE_PLATFORM_WEBHOOK_ENABLED=true

      # üìä Event Configuration
      - KC_SPI_EVENTS_LISTENER_JBOSS_LOGGING_SUCCESS_LEVEL=info
      - KC_SPI_EVENTS_LISTENER_JBOSS_LOGGING_ERROR_LEVEL=warn
    volumes:
      - ./keycloak:/opt/keycloak/data/import:ro
      - ./ssl:/opt/keycloak/conf/tls:ro # Mount SSL certifik√°t≈Ø (read-only)
      - ../themes/core-material:/opt/keycloak/themes/core-material:ro # Material Design theme
    ports:
      - "${KEYCLOAK_PORT:-8081}:8080" # HTTP port pro health/debug/admin
      - "8443:8443" # HTTPS port pro re√°ln√Ω provoz
    # üöÄ Start p≈ô√≠kaz s optim√°ln√≠mi parametry pro development
    command:
      [
        "start",
        "--import-realm", # Import realm soubor≈Ø p≈ôi startu
        "--http-enabled=true", # Povol√≠ HTTP na portu 8080 (pro health checks)
        "--http-port=8080", # Explicitn√≠ HTTP port
        "--hostname=core-platform.local", # Hostname pro HTTPS odkazy
        "--hostname-strict=false" # Nestriktn√≠ hostname validace (pro development)
      ]
    networks:
      - core-net
    restart: unless-stopped

  # üìä Monitoring Stack
  grafana:
    image: grafana/grafana:10.4.0
    container_name: core-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - core-net

  loki:
    image: grafana/loki:3.0.0
    container_name: core-loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml
      - loki_data:/loki
    networks:
      - core-net

  promtail:
    image: grafana/promtail:3.0.0
    container_name: core-promtail
    command: -config.file=/etc/promtail/config.yml
    ports:
      - "9080:9080"
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - promtail_positions:/tmp
    depends_on:
      - loki
    networks:
      - core-net
    user: "0:0"

  prometheus:
    image: prom/prometheus:v2.54.0
    container_name: core-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - loki
      - promtail
    networks:
      - core-net

  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: core-node-exporter
    ports:
      - "9100:9100"
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    networks:
      - core-net
    profiles:
      - vm

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: core-cadvisor
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - core-net
    privileged: true

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: core-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://core:core@db:5432/core?sslmode=disable
    depends_on:
      - db
    networks:
      - core-net

volumes:
  core_db_data:
  grafana_data:
  loki_data:
  promtail_positions:
  certbot-www:


networks:
  core-net:
    driver: bridge

#!/bin/bash

# üåê Core Platform - Local Domain Setup
# Automaticky nastav√≠ local development dom√©ny pro macOS/Linux

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HOSTS_FILE="/etc/hosts"
HOSTS_BACKUP="/etc/hosts.backup.$(date +%Y%m%d_%H%M%S)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running with sudo
check_permissions() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run with sudo to modify /etc/hosts"
        echo "Usage: sudo $0"
        exit 1
    fi
}

# Backup hosts file
backup_hosts() {
    log_info "Creating backup: $HOSTS_BACKUP"
    cp "$HOSTS_FILE" "$HOSTS_BACKUP"
    log_success "Hosts file backed up"
}

# Setup core platform domains
setup_domains() {
    log_info "Setting up Core Platform local domains..."
    
    # Remove existing entries
    sed -i '' '/# Core Platform - START/,/# Core Platform - END/d' "$HOSTS_FILE" 2>/dev/null || true
    
    # Add new entries
    cat >> "$HOSTS_FILE" << 'EOF'

# Core Platform - START (Auto-generated by setup-local-domains.sh)
# Main domain
127.0.0.1   core-platform.local

# üéØ WILDCARD SUPPORT: All subdomains point to localhost
# This supports unlimited tenant subdomains: {tenant}.core-platform.local
127.0.0.1   test-tenant.core-platform.local
127.0.0.1   acme-corp.core-platform.local
127.0.0.1   company-b.core-platform.local

# Development convenience - common subdomains
127.0.0.1   api.core-platform.local
127.0.0.1   auth.core-platform.local  
127.0.0.1   admin.core-platform.local
127.0.0.1   grafana.core-platform.local
127.0.0.1   jaeger.core-platform.local

# Note: macOS doesn't support true wildcard in /etc/hosts
# For unlimited subdomains, use: sudo dscacheutil -flushcache
# Or install dnsmasq for true wildcard support
# Core Platform - END
EOF

    log_success "Core Platform domains configured"
}

# Flush DNS cache
flush_dns() {
    log_info "Flushing DNS cache..."
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        dscacheutil -flushcache
        sudo killall -HUP mDNSResponder 2>/dev/null || true
        log_success "macOS DNS cache flushed"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        if command -v systemd-resolve &> /dev/null; then
            systemd-resolve --flush-caches
        elif command -v nscd &> /dev/null; then
            nscd -i hosts
        fi
        log_success "Linux DNS cache flushed"
    fi
}

# Add new tenant domain
add_tenant_domain() {
    local tenant_key="$1"
    
    if [[ -z "$tenant_key" ]]; then
        log_error "Tenant key required"
        echo "Usage: sudo $0 add-tenant <tenant-key>"
        exit 1
    fi
    
    log_info "Adding tenant domain: $tenant_key.core-platform.local"
    
    # Check if already exists
    if grep -q "$tenant_key.core-platform.local" "$HOSTS_FILE"; then
        log_warn "Domain $tenant_key.core-platform.local already exists"
        return 0
    fi
    
    # Add before the END marker
    sed -i '' "/# Core Platform - END/i\\
127.0.0.1   $tenant_key.core-platform.local
" "$HOSTS_FILE"
    
    flush_dns
    log_success "Added tenant domain: $tenant_key.core-platform.local"
}

# Remove tenant domain
remove_tenant_domain() {
    local tenant_key="$1"
    
    if [[ -z "$tenant_key" ]]; then
        log_error "Tenant key required"
        echo "Usage: sudo $0 remove-tenant <tenant-key>"
        exit 1
    fi
    
    log_info "Removing tenant domain: $tenant_key.core-platform.local"
    
    sed -i '' "/$tenant_key.core-platform.local/d" "$HOSTS_FILE"
    flush_dns
    
    log_success "Removed tenant domain: $tenant_key.core-platform.local"
}

# Show current configuration
show_config() {
    log_info "Current Core Platform domains in /etc/hosts:"
    echo
    grep -A 20 "# Core Platform - START" "$HOSTS_FILE" 2>/dev/null || log_warn "No Core Platform configuration found"
    echo
}

# Setup dnsmasq for true wildcard support (optional)
setup_dnsmasq() {
    log_info "Setting up dnsmasq for true wildcard support..."
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS with Homebrew
        if ! command -v brew &> /dev/null; then
            log_error "Homebrew required for dnsmasq setup"
            echo "Install Homebrew first: https://brew.sh"
            exit 1
        fi
        
        # Install dnsmasq
        if ! brew list dnsmasq &>/dev/null; then
            log_info "Installing dnsmasq via Homebrew..."
            brew install dnsmasq
        fi
        
        # Configure dnsmasq
        echo "address=/.core-platform.local/127.0.0.1" | sudo tee /usr/local/etc/dnsmasq.conf
        
        # Start dnsmasq
        sudo brew services start dnsmasq
        
        # Configure macOS to use dnsmasq for .local domains
        sudo mkdir -p /etc/resolver
        echo "nameserver 127.0.0.1" | sudo tee /etc/resolver/core-platform.local
        
        log_success "dnsmasq configured for *.core-platform.local wildcard support"
        log_info "You can now use ANY subdomain: https://anything.core-platform.local"
        
    else
        log_warn "dnsmasq setup only implemented for macOS. Use manual hosts entries for Linux."
    fi
}

# Main function
main() {
    case "${1:-setup}" in
        "setup")
            check_permissions
            backup_hosts
            setup_domains
            flush_dns
            show_config
            log_success "Setup complete! You can now access:"
            echo "  ‚Ä¢ https://core-platform.local (tenant discovery)"
            echo "  ‚Ä¢ https://test-tenant.core-platform.local (default tenant)"
            echo "  ‚Ä¢ https://{your-tenant}.core-platform.local (any tenant)"
            echo ""
            echo "üí° For true wildcard support, run: sudo $0 dnsmasq"
            ;;
        "add-tenant")
            check_permissions
            backup_hosts
            add_tenant_domain "$2"
            ;;
        "remove-tenant")
            check_permissions
            backup_hosts
            remove_tenant_domain "$2"
            ;;
        "dnsmasq")
            check_permissions
            setup_dnsmasq
            ;;
        "show")
            show_config
            ;;
        "help"|"-h"|"--help")
            echo "üåê Core Platform - Local Domain Setup"
            echo ""
            echo "Usage: sudo $0 [command] [options]"
            echo ""
            echo "Commands:"
            echo "  setup                     Set up all Core Platform domains (default)"
            echo "  add-tenant <key>          Add specific tenant domain"
            echo "  remove-tenant <key>       Remove specific tenant domain"
            echo "  dnsmasq                   Setup true wildcard support via dnsmasq"
            echo "  show                      Show current configuration"
            echo "  help                      Show this help"
            echo ""
            echo "Examples:"
            echo "  sudo $0                           # Initial setup"
            echo "  sudo $0 add-tenant acme-corp      # Add acme-corp.core-platform.local"
            echo "  sudo $0 remove-tenant acme-corp   # Remove acme-corp.core-platform.local"
            echo "  sudo $0 dnsmasq                   # Enable true wildcard support"
            echo "  $0 show                           # Show current config (no sudo needed)"
            ;;
        *)
            log_error "Unknown command: $1"
            echo "Run '$0 help' for usage information"
            exit 1
            ;;
    esac
}

main "$@"
import Keycloak from 'keycloak-js';

// üîë Keycloak instance - singleton
let keycloakInstance = null;
let initializationPromise = null;

/**
 * ‚úÖ OPRAVENO: Keycloak 26.x integrace s environment promƒõnn√Ωmi
 * - Pou≈æ√≠v√° VITE_KEYCLOAK_* promƒõnn√© z docker-compose.yml
 * - Keycloak bƒõ≈æ√≠ na root path (/) bez /auth prefixu
 * - Nginx reverse proxy zaji≈°≈•uje routing z /auth/* na Keycloak root
 * - ≈Ω√°dn√© hardcoded dom√©ny nebo URL
 */
class KeycloakService {
  constructor() {
    this.keycloak = null;
    this.token = null;
    this.refreshToken = null;
    this.isInitialized = false;
  }

  /**
   * Inicializace Keycloak - vol√° se p≈ôi startu aplikace
   */
  async initialize() {
    if (initializationPromise) {
      return initializationPromise;
    }

    initializationPromise = this._doInitialize();
    return initializationPromise;
  }

  async _doInitialize() {
    try {
      console.log('üîë Keycloak: Inicializuji s environment promƒõnn√Ωmi...');
      
      // ‚úÖ OPRAVENO: Naƒç√≠t√° z environment promƒõnn√Ωch m√≠sto keycloak.json
      const keycloakConfig = {
        url: import.meta.env.VITE_KEYCLOAK_URL || window.location.origin,
        realm: import.meta.env.VITE_KEYCLOAK_REALM || 'core-platform',
        clientId: import.meta.env.VITE_KEYCLOAK_CLIENT_ID || 'web'
      };
      
      console.log('üîë Keycloak: Konfigurace z environment:', keycloakConfig);

      // Vytvo≈ô Keycloak instanci
      this.keycloak = new Keycloak(keycloakConfig);
      keycloakInstance = this.keycloak;

      // ‚úÖ OPRAVENO: Keycloak 26.x optimalizovan√° inicializace bez silent-sso.html
      const authenticated = await this.keycloak.init({
        onLoad: 'check-sso',
        checkLoginIframe: false,  // vypnout iframe session check pokud dƒõl√° probl√©my
        pkceMethod: 'S256',       // modern√≠ PKCE flow pro Keycloak 26.x
      });

      if (authenticated) {
        console.log('üîë Keycloak: U≈æivatel p≈ôihl√°≈°en');
        
        // Ulo≈æ tokeny v pamƒõti
        this.token = this.keycloak.token;
        this.refreshToken = this.keycloak.refreshToken;
        
        // üéØ NOV√Å FUNKCE: Ulo≈æ token do localStorage pro AuthService
        if (this.keycloak.token) {
          localStorage.setItem('keycloak-token', this.keycloak.token);
          console.log('üîë Keycloak: Token ulo≈æen do localStorage pro AuthService');
        }
        if (this.keycloak.refreshToken) {
          localStorage.setItem('keycloak-refresh-token', this.keycloak.refreshToken);
        }
        
        this.isInitialized = true;

        // Nastav automatick√© obnovov√°n√≠ token≈Ø
        this.setupTokenRefresh();
        
        return true;
      } else {
        console.log('üîë Keycloak: U≈æivatel nen√≠ p≈ôihl√°≈°en');
        this.isInitialized = true;
        return false;
      }
    } catch (error) {
      console.error('üîë Keycloak: Chyba p≈ôi inicializaci:', error);
      throw error;
    }
  }

  /**
   * Nastav automatick√© obnovov√°n√≠ token≈Ø
   */
  setupTokenRefresh() {
    if (!this.keycloak) return;

    // Obnov token pokud vypr≈°√≠ za m√©nƒõ ne≈æ 30 sekund
    setInterval(() => {
      this.keycloak.updateToken(30).then((refreshed) => {
        if (refreshed) {
          console.log('üîë Keycloak: Token obnoven');
          this.token = this.keycloak.token;
          this.refreshToken = this.keycloak.refreshToken;
          
          // üéØ NOV√Å FUNKCE: Synchronizuj obnoven√Ω token s localStorage
          if (this.keycloak.token) {
            localStorage.setItem('keycloak-token', this.keycloak.token);
            console.log('üîë Keycloak: Obnoven√Ω token synchronizov√°n s localStorage');
          }
        }
      }).catch((error) => {
        console.error('üîë Keycloak: Chyba p≈ôi obnovov√°n√≠ tokenu:', error);
        this.logout();
      });
    }, 10000); // Kontroluj ka≈æd√Ωch 10 sekund
  }

  /**
   * Z√≠skej aktu√°ln√≠ access token
   */
  getToken() {
    return this.token;
  }

  /**
   * Zkontroluj, zda je u≈æivatel p≈ôihl√°≈°en
   */
  isAuthenticated() {
    return this.isInitialized && this.keycloak?.authenticated;
  }

  /**
   * Z√≠skej informace o u≈æivateli
   */
  getUserInfo() {
    if (!this.keycloak?.tokenParsed) return null;

    const token = this.keycloak.tokenParsed;
    return {
      username: token.preferred_username,
      email: token.email,
      firstName: token.given_name,
      lastName: token.family_name,
      roles: token.realm_access?.roles || []
    };
  }

  /**
   * Z√≠skej aktu√°ln√≠ informace o u≈æivateli z Keycloak serveru (fresh data)
   */
  async getUserInfoFresh() {
    if (!this.keycloak || !this.isAuthenticated()) {
      throw new Error('Keycloak not initialized or user not authenticated');
    }

    try {
      console.log('üîë Keycloak: Naƒç√≠t√°m fresh user info ze serveru...');
      
      // Z√≠skej aktu√°ln√≠ data z Keycloak serveru
      const userInfo = await this.keycloak.loadUserInfo();
      console.log('üîë Keycloak: Fresh user info naƒçtena:', userInfo);
      
      // Kombinuj s daty z tokenu
      const tokenData = this.keycloak.tokenParsed;
      
      const freshUserData = {
        // Z√°kladn√≠ √∫daje
        username: userInfo.preferred_username || tokenData?.preferred_username,
        email: userInfo.email || tokenData?.email,
        firstName: userInfo.given_name || tokenData?.given_name,
        lastName: userInfo.family_name || tokenData?.family_name,
        name: userInfo.name || tokenData?.name,
        
        // Role z tokenu (nejƒçerstvƒõj≈°√≠)
        roles: tokenData?.realm_access?.roles || [],
        
        // Roz≈°√≠≈ôen√© atributy z Keycloak (custom fields)
        department: userInfo.department,
        manager: userInfo.manager,
        position: userInfo.position,
        phone: userInfo.phone_number,
        locale: userInfo.locale,
        
        // Metadata
        emailVerified: userInfo.email_verified,
        updatedAt: userInfo.updated_at,
        
        // Token info
        tokenIssuedAt: new Date(tokenData?.iat * 1000),
        tokenExpiresAt: new Date(tokenData?.exp * 1000),
        issuer: tokenData?.iss
      };
      
      console.log('üîë Keycloak: Zpracovan√° fresh data:', freshUserData);
      return freshUserData;
      
    } catch (error) {
      console.error('üîë Keycloak: Chyba p≈ôi naƒç√≠t√°n√≠ fresh user info:', error);
      
      // Fallback na data z tokenu pokud server sel≈æe
      const tokenData = this.keycloak.tokenParsed;
      if (tokenData) {
        console.log('üîë Keycloak: Pou≈æ√≠v√°m fallback data z tokenu');
        return {
          username: tokenData.preferred_username,
          email: tokenData.email,
          firstName: tokenData.given_name,
          lastName: tokenData.family_name,
          name: tokenData.name,
          roles: tokenData.realm_access?.roles || [],
          tokenIssuedAt: new Date(tokenData.iat * 1000),
          tokenExpiresAt: new Date(tokenData.exp * 1000),
          issuer: tokenData.iss
        };
      }
      
      throw error;
    }
  }

  /**
   * Odhl√°sit u≈æivatele
   */
  logout() {
    // üéØ NOV√Å FUNKCE: Vyƒçisti localStorage p≈ôi odhl√°≈°en√≠
    localStorage.removeItem('keycloak-token');
    localStorage.removeItem('keycloak-refresh-token');
    localStorage.removeItem('keycloak-id-token');
    console.log('üîë Keycloak: localStorage vyƒçi≈°tƒõn p≈ôi logout');
    
    if (this.keycloak) {
      this.keycloak.logout({
        redirectUri: window.location.origin
      });
    }
  }

  /**
   * P≈ôesmƒõruj na Keycloak Account Console pro zmƒõnu hesla/√∫daj≈Ø
   */
  openAccountConsole() {
    if (this.keycloak) {
      const accountUrl = `${this.keycloak.authServerUrl}/realms/${this.keycloak.realm}/account`;
      window.open(accountUrl, '_blank');
    }
  }

  /**
   * P≈ôesmƒõruj p≈ô√≠mo na zmƒõnu hesla v Keycloak Account Console
   */
  openPasswordChange() {
    if (this.keycloak) {
      const passwordUrl = `${this.keycloak.authServerUrl}/realms/${this.keycloak.realm}/account/password`;
      window.open(passwordUrl, '_blank');
    }
  }

  /**
   * P≈ôesmƒõruj na osobn√≠ √∫daje v Keycloak Account Console
   */
  openPersonalInfo() {
    if (this.keycloak) {
      const personalUrl = `${this.keycloak.authServerUrl}/realms/${this.keycloak.realm}/account/personal-info`;
      window.open(personalUrl, '_blank');
    }
  }

  /**
   * Z√≠skej URL pro Keycloak Account Console
   */
  getAccountConsoleUrl() {
    if (this.keycloak) {
      return `${this.keycloak.authServerUrl}/realms/${this.keycloak.realm}/account`;
    }
    return null;
  }

  /**
   * HTTP interceptor - p≈ôid√° Authorization header ke v≈°em API po≈æadavk≈Øm
   */
  async apiCall(url, options = {}) {
    const token = this.getToken();
    
    if (!token) {
      throw new Error('No access token available');
    }

    // P≈ôidej Authorization header
    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
      ...options.headers
    };

    const response = await fetch(url, {
      ...options,
      headers,
      credentials: 'include'
    });

    // Pokud 401, zkus obnovit token a opakuj po≈æadavek
    if (response.status === 401 && this.keycloak) {
      try {
        const refreshed = await this.keycloak.updateToken(5);
        if (refreshed) {
          this.token = this.keycloak.token;
          // Opakuj po≈æadavek s nov√Ωm tokenem
          headers['Authorization'] = `Bearer ${this.token}`;
          return fetch(url, { ...options, headers, credentials: 'include' });
        }
      } catch (error) {
        console.error('üîë Keycloak: Nelze obnovit token:', error);
        this.logout();
        throw error;
      }
    }

    return response;
  }

  /**
   * Manu√°ln√≠ p≈ôihl√°≈°en√≠ - zavol√° se kdy≈æ user klikne na login tlaƒç√≠tko
   */
  login() {
    if (this.keycloak) {
      this.keycloak.login({
        redirectUri: window.location.origin
      });
    }
  }
}

// Export singleton instance
export const keycloakService = new KeycloakService();
export { keycloakInstance }; // Pro p≈ô√≠pady kdy pot≈ôebujeme p≈ô√≠m√Ω p≈ô√≠stup
export default keycloakService;
// OIDC Authorization Code Flow service
class OIDCAuthService {
  constructor() {
    this.keycloakConfig = {
      url: 'http://localhost/auth',   // üîë ve≈ôejn√° URL (za NGINX)
      realm: 'core-platform',
      clientId: 'core-backend',  // Pou≈æ√≠v√°me backend client
    };
    
    this.logger = null;
    this._initLogger();
  }

  // Inicializace loggeru
  async _initLogger() {
    try {
      const module = await import('./logger.js');
      this.logger = module.default;
    } catch (error) {
      console.warn('Failed to load logger:', error);
    }
  }

  // Logov√°n√≠ s fallback
  _log(message, extra = {}) {
    console.log(`üîë OIDC: ${message}`, extra);
    if (this.logger) {
      // üîß FIX: Pou≈æ√≠v√°m spr√°vnou logger metodu
      this.logger.info('OIDC_FLOW', message, extra);
    }
  }

  /**
   * üîë Krok 1: Zah√°jen√≠ OIDC Authorization Code Flow
   */
  async initiateLogin(redirectPath = '/') {
    try {
      this._log('Zahajuji OIDC Authorization Code Flow', { redirectPath });
      
      // Ulo≈æ√≠me redirect path pro po-loginov√© p≈ôesmƒõrov√°n√≠
      sessionStorage.setItem('oidc_redirect_path', redirectPath);
      
      // Zavol√°me backend pro authorization URL
      const response = await fetch('/api/auth/authorize', {
        method: 'GET',
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error(`Authorization request failed: ${response.status}`);
      }
      
      const authData = await response.json();
      this._log('Z√≠skali jsme authorization URL', { 
        hasUrl: !!authData.authorizationUrl,
        hasState: !!authData.state 
      });
      
      // Ulo≈æ√≠me PKCE parametry pro callback
      sessionStorage.setItem('oidc_state', authData.state);
      sessionStorage.setItem('oidc_code_verifier', authData.codeVerifier);
      
      // P≈ôesmƒõrujeme na Keycloak login
      window.location.href = authData.authorizationUrl;
      
    } catch (error) {
      this._log('Chyba p≈ôi zah√°jen√≠ OIDC flow', { error: error.message });
      throw error;
    }
  }

  /**
   * üîë Krok 2: Zpracov√°n√≠ callback z Keycloak
   */
  async handleCallback() {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const code = urlParams.get('code');
      const state = urlParams.get('state');
      const error = urlParams.get('error');
      
      if (error) {
        throw new Error(`Authorization failed: ${error}`);
      }
      
      if (!code || !state) {
        throw new Error('Missing authorization code or state parameter');
      }
      
      // Ovƒõ≈ô√≠me state parameter
      const storedState = sessionStorage.getItem('oidc_state');
      if (state !== storedState) {
        throw new Error('Invalid state parameter - possible CSRF attack');
      }
      
      this._log('Zpracov√°v√°m authorization callback', { hasCode: !!code, stateValid: true });
      
      // Zavol√°me backend callback endpoint
      const response = await fetch(`/api/auth/callback?code=${code}&state=${state}`, {
        method: 'GET',
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error(`Callback processing failed: ${response.status}`);
      }
      
      const callbackData = await response.json();
      this._log('Callback √∫spƒõ≈°nƒõ zpracov√°n', callbackData);
      
      // Vyƒçist√≠me session storage
      sessionStorage.removeItem('oidc_state');
      sessionStorage.removeItem('oidc_code_verifier');
      
      // P≈ôesmƒõrujeme na p≈Øvodn√≠ str√°nku
      const redirectPath = sessionStorage.getItem('oidc_redirect_path') || '/';
      sessionStorage.removeItem('oidc_redirect_path');
      
      window.location.href = redirectPath;
      
    } catch (error) {
      this._log('Chyba p≈ôi zpracov√°n√≠ callback', { error: error.message });
      throw error;
    }
  }

  /**
   * üîë Kontrola p≈ôihl√°≈°en√≠
   */
  async isAuthenticated() {
    try {
      // Zkus√≠me volat chr√°nƒõn√Ω endpoint
      const response = await fetch('/api/auth/userinfo', {
        method: 'GET',
        credentials: 'include'
      });
      
      return response.ok;
    } catch (error) {
      this._log('Chyba p≈ôi kontrole autentizace', { error: error.message });
      return false;
    }
  }

  /**
   * üîë Z√≠sk√°n√≠ informac√≠ o u≈æivateli
   */
  async getUserInfo() {
    try {
      const response = await fetch('/api/auth/userinfo', {
        method: 'GET',
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error(`Failed to get user info: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      this._log('Chyba p≈ôi z√≠sk√°v√°n√≠ user info', { error: error.message });
      return null;
    }
  }

  /**
   * üîë API vol√°n√≠ s automatickou autentizac√≠
   */
  async apiCall(url, options = {}) {
    try {
      const fullUrl = `/api${url}`;
      
      const response = await fetch(fullUrl, {
        ...options,
        credentials: 'include'  // Session-based auth
      });
      
      if (response.status === 401) {
        this._log('API call returned 401 - redirecting to login');
        this.initiateLogin(window.location.pathname);
        return null;
      }
      
      return response;
      
    } catch (error) {
      this._log('API call failed', { url, error: error.message });
      throw error;
    }
  }

  /**
   * üîë Odhl√°≈°en√≠
   */
  async logout() {
    try {
      this._log('Zahajuji odhl√°≈°en√≠');
      
      await fetch('/api/auth/logout', {
        method: 'POST',
        credentials: 'include'
      });
      
      // P≈ôesmƒõrujeme na login bez ohledu na response
      window.location.href = '/login';
      
    } catch (error) {
      this._log('Chyba p≈ôi odhl√°≈°en√≠', { error: error.message });
      // P≈ôesmƒõrujeme na login i p≈ôi chybƒõ
      window.location.href = '/login';
    }
  }
}

// Export singleton instance
export const oidcAuthService = new OIDCAuthService();
export default oidcAuthService;